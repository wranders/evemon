/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.5.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetCharactersCharacterIdChatChannels200Ok :  IEquatable<GetCharactersCharacterIdChatChannels200Ok>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCharactersCharacterIdChatChannels200Ok" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetCharactersCharacterIdChatChannels200Ok() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCharactersCharacterIdChatChannels200Ok" /> class.
        /// </summary>
        /// <param name="Allowed">allowed array (required).</param>
        /// <param name="Blocked">blocked array (required).</param>
        /// <param name="ChannelId">Unique channel ID. Always negative for player-created channels. Permanent (CCP created) channels have a positive ID, but don&#39;t appear in the API (required).</param>
        /// <param name="ComparisonKey">Normalized, unique string used to compare channel names (required).</param>
        /// <param name="HasPassword">Whether this is a password protected channel (required).</param>
        /// <param name="Motd">Message of the day for this channel (required).</param>
        /// <param name="Muted">muted array (required).</param>
        /// <param name="Name">Displayed name of channel (required).</param>
        /// <param name="Operators">operators array (required).</param>
        /// <param name="OwnerId">owner_id integer (required).</param>
        public GetCharactersCharacterIdChatChannels200Ok(List<GetCharactersCharacterIdChatChannelsAllowed> Allowed = default(List<GetCharactersCharacterIdChatChannelsAllowed>), List<GetCharactersCharacterIdChatChannelsBlocked> Blocked = default(List<GetCharactersCharacterIdChatChannelsBlocked>), int? ChannelId = default(int?), string ComparisonKey = default(string), bool? HasPassword = default(bool?), string Motd = default(string), List<GetCharactersCharacterIdChatChannelsMuted> Muted = default(List<GetCharactersCharacterIdChatChannelsMuted>), string Name = default(string), List<GetCharactersCharacterIdChatChannelsOperator> Operators = default(List<GetCharactersCharacterIdChatChannelsOperator>), int? OwnerId = default(int?))
        {
            // to ensure "Allowed" is required (not null)
            if (Allowed == null)
            {
                throw new InvalidDataException("Allowed is a required property for GetCharactersCharacterIdChatChannels200Ok and cannot be null");
            }
            else
            {
                this.Allowed = Allowed;
            }
            // to ensure "Blocked" is required (not null)
            if (Blocked == null)
            {
                throw new InvalidDataException("Blocked is a required property for GetCharactersCharacterIdChatChannels200Ok and cannot be null");
            }
            else
            {
                this.Blocked = Blocked;
            }
            // to ensure "ChannelId" is required (not null)
            if (ChannelId == null)
            {
                throw new InvalidDataException("ChannelId is a required property for GetCharactersCharacterIdChatChannels200Ok and cannot be null");
            }
            else
            {
                this.ChannelId = ChannelId;
            }
            // to ensure "ComparisonKey" is required (not null)
            if (ComparisonKey == null)
            {
                throw new InvalidDataException("ComparisonKey is a required property for GetCharactersCharacterIdChatChannels200Ok and cannot be null");
            }
            else
            {
                this.ComparisonKey = ComparisonKey;
            }
            // to ensure "HasPassword" is required (not null)
            if (HasPassword == null)
            {
                throw new InvalidDataException("HasPassword is a required property for GetCharactersCharacterIdChatChannels200Ok and cannot be null");
            }
            else
            {
                this.HasPassword = HasPassword;
            }
            // to ensure "Motd" is required (not null)
            if (Motd == null)
            {
                throw new InvalidDataException("Motd is a required property for GetCharactersCharacterIdChatChannels200Ok and cannot be null");
            }
            else
            {
                this.Motd = Motd;
            }
            // to ensure "Muted" is required (not null)
            if (Muted == null)
            {
                throw new InvalidDataException("Muted is a required property for GetCharactersCharacterIdChatChannels200Ok and cannot be null");
            }
            else
            {
                this.Muted = Muted;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for GetCharactersCharacterIdChatChannels200Ok and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Operators" is required (not null)
            if (Operators == null)
            {
                throw new InvalidDataException("Operators is a required property for GetCharactersCharacterIdChatChannels200Ok and cannot be null");
            }
            else
            {
                this.Operators = Operators;
            }
            // to ensure "OwnerId" is required (not null)
            if (OwnerId == null)
            {
                throw new InvalidDataException("OwnerId is a required property for GetCharactersCharacterIdChatChannels200Ok and cannot be null");
            }
            else
            {
                this.OwnerId = OwnerId;
            }
        }
        
        /// <summary>
        /// allowed array
        /// </summary>
        /// <value>allowed array</value>
        [DataMember(Name="allowed", EmitDefaultValue=false)]
        public List<GetCharactersCharacterIdChatChannelsAllowed> Allowed { get; set; }

        /// <summary>
        /// blocked array
        /// </summary>
        /// <value>blocked array</value>
        [DataMember(Name="blocked", EmitDefaultValue=false)]
        public List<GetCharactersCharacterIdChatChannelsBlocked> Blocked { get; set; }

        /// <summary>
        /// Unique channel ID. Always negative for player-created channels. Permanent (CCP created) channels have a positive ID, but don&#39;t appear in the API
        /// </summary>
        /// <value>Unique channel ID. Always negative for player-created channels. Permanent (CCP created) channels have a positive ID, but don&#39;t appear in the API</value>
        [DataMember(Name="channel_id", EmitDefaultValue=false)]
        public int? ChannelId { get; set; }

        /// <summary>
        /// Normalized, unique string used to compare channel names
        /// </summary>
        /// <value>Normalized, unique string used to compare channel names</value>
        [DataMember(Name="comparison_key", EmitDefaultValue=false)]
        public string ComparisonKey { get; set; }

        /// <summary>
        /// Whether this is a password protected channel
        /// </summary>
        /// <value>Whether this is a password protected channel</value>
        [DataMember(Name="has_password", EmitDefaultValue=false)]
        public bool? HasPassword { get; set; }

        /// <summary>
        /// Message of the day for this channel
        /// </summary>
        /// <value>Message of the day for this channel</value>
        [DataMember(Name="motd", EmitDefaultValue=false)]
        public string Motd { get; set; }

        /// <summary>
        /// muted array
        /// </summary>
        /// <value>muted array</value>
        [DataMember(Name="muted", EmitDefaultValue=false)]
        public List<GetCharactersCharacterIdChatChannelsMuted> Muted { get; set; }

        /// <summary>
        /// Displayed name of channel
        /// </summary>
        /// <value>Displayed name of channel</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// operators array
        /// </summary>
        /// <value>operators array</value>
        [DataMember(Name="operators", EmitDefaultValue=false)]
        public List<GetCharactersCharacterIdChatChannelsOperator> Operators { get; set; }

        /// <summary>
        /// owner_id integer
        /// </summary>
        /// <value>owner_id integer</value>
        [DataMember(Name="owner_id", EmitDefaultValue=false)]
        public int? OwnerId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCharactersCharacterIdChatChannels200Ok {\n");
            sb.Append("  Allowed: ").Append(Allowed).Append("\n");
            sb.Append("  Blocked: ").Append(Blocked).Append("\n");
            sb.Append("  ChannelId: ").Append(ChannelId).Append("\n");
            sb.Append("  ComparisonKey: ").Append(ComparisonKey).Append("\n");
            sb.Append("  HasPassword: ").Append(HasPassword).Append("\n");
            sb.Append("  Motd: ").Append(Motd).Append("\n");
            sb.Append("  Muted: ").Append(Muted).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Operators: ").Append(Operators).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCharactersCharacterIdChatChannels200Ok);
        }

        /// <summary>
        /// Returns true if GetCharactersCharacterIdChatChannels200Ok instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCharactersCharacterIdChatChannels200Ok to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCharactersCharacterIdChatChannels200Ok input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Allowed == input.Allowed ||
                    this.Allowed != null &&
                    this.Allowed.SequenceEqual(input.Allowed)
                ) && 
                (
                    this.Blocked == input.Blocked ||
                    this.Blocked != null &&
                    this.Blocked.SequenceEqual(input.Blocked)
                ) && 
                (
                    this.ChannelId == input.ChannelId ||
                    (this.ChannelId != null &&
                    this.ChannelId.Equals(input.ChannelId))
                ) && 
                (
                    this.ComparisonKey == input.ComparisonKey ||
                    (this.ComparisonKey != null &&
                    this.ComparisonKey.Equals(input.ComparisonKey))
                ) && 
                (
                    this.HasPassword == input.HasPassword ||
                    (this.HasPassword != null &&
                    this.HasPassword.Equals(input.HasPassword))
                ) && 
                (
                    this.Motd == input.Motd ||
                    (this.Motd != null &&
                    this.Motd.Equals(input.Motd))
                ) && 
                (
                    this.Muted == input.Muted ||
                    this.Muted != null &&
                    this.Muted.SequenceEqual(input.Muted)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Operators == input.Operators ||
                    this.Operators != null &&
                    this.Operators.SequenceEqual(input.Operators)
                ) && 
                (
                    this.OwnerId == input.OwnerId ||
                    (this.OwnerId != null &&
                    this.OwnerId.Equals(input.OwnerId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Allowed != null)
                    hashCode = hashCode * 59 + this.Allowed.GetHashCode();
                if (this.Blocked != null)
                    hashCode = hashCode * 59 + this.Blocked.GetHashCode();
                if (this.ChannelId != null)
                    hashCode = hashCode * 59 + this.ChannelId.GetHashCode();
                if (this.ComparisonKey != null)
                    hashCode = hashCode * 59 + this.ComparisonKey.GetHashCode();
                if (this.HasPassword != null)
                    hashCode = hashCode * 59 + this.HasPassword.GetHashCode();
                if (this.Motd != null)
                    hashCode = hashCode * 59 + this.Motd.GetHashCode();
                if (this.Muted != null)
                    hashCode = hashCode * 59 + this.Muted.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Operators != null)
                    hashCode = hashCode * 59 + this.Operators.GetHashCode();
                if (this.OwnerId != null)
                    hashCode = hashCode * 59 + this.OwnerId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

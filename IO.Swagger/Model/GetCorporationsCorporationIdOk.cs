/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.5.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// 200 ok object
    /// </summary>
    [DataContract]
    public partial class GetCorporationsCorporationIdOk :  IEquatable<GetCorporationsCorporationIdOk>, IValidatableObject
    {
        /// <summary>
        /// faction string
        /// </summary>
        /// <value>faction string</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FactionEnum
        {
            
            /// <summary>
            /// Enum Minmatar for "Minmatar"
            /// </summary>
            [EnumMember(Value = "Minmatar")]
            Minmatar,
            
            /// <summary>
            /// Enum Gallente for "Gallente"
            /// </summary>
            [EnumMember(Value = "Gallente")]
            Gallente,
            
            /// <summary>
            /// Enum Caldari for "Caldari"
            /// </summary>
            [EnumMember(Value = "Caldari")]
            Caldari,
            
            /// <summary>
            /// Enum Amarr for "Amarr"
            /// </summary>
            [EnumMember(Value = "Amarr")]
            Amarr
        }

        /// <summary>
        /// faction string
        /// </summary>
        /// <value>faction string</value>
        [DataMember(Name="faction", EmitDefaultValue=false)]
        public FactionEnum? Faction { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCorporationsCorporationIdOk" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetCorporationsCorporationIdOk() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCorporationsCorporationIdOk" /> class.
        /// </summary>
        /// <param name="AllianceId">id of alliance that corporation is a member of, if any.</param>
        /// <param name="CeoId">ceo_id integer (required).</param>
        /// <param name="CorporationDescription">corporation_description string (required).</param>
        /// <param name="CorporationName">the full name of the corporation (required).</param>
        /// <param name="CreationDate">creation_date string.</param>
        /// <param name="CreatorId">creator_id integer (required).</param>
        /// <param name="Faction">faction string.</param>
        /// <param name="MemberCount">member_count integer (required).</param>
        /// <param name="TaxRate">tax_rate number (required).</param>
        /// <param name="Ticker">the short name of the corporation (required).</param>
        /// <param name="Url">url string (required).</param>
        public GetCorporationsCorporationIdOk(int? AllianceId = default(int?), int? CeoId = default(int?), string CorporationDescription = default(string), string CorporationName = default(string), DateTime? CreationDate = default(DateTime?), int? CreatorId = default(int?), FactionEnum? Faction = default(FactionEnum?), int? MemberCount = default(int?), float? TaxRate = default(float?), string Ticker = default(string), string Url = default(string))
        {
            // to ensure "CeoId" is required (not null)
            if (CeoId == null)
            {
                throw new InvalidDataException("CeoId is a required property for GetCorporationsCorporationIdOk and cannot be null");
            }
            else
            {
                this.CeoId = CeoId;
            }
            // to ensure "CorporationDescription" is required (not null)
            if (CorporationDescription == null)
            {
                throw new InvalidDataException("CorporationDescription is a required property for GetCorporationsCorporationIdOk and cannot be null");
            }
            else
            {
                this.CorporationDescription = CorporationDescription;
            }
            // to ensure "CorporationName" is required (not null)
            if (CorporationName == null)
            {
                throw new InvalidDataException("CorporationName is a required property for GetCorporationsCorporationIdOk and cannot be null");
            }
            else
            {
                this.CorporationName = CorporationName;
            }
            // to ensure "CreatorId" is required (not null)
            if (CreatorId == null)
            {
                throw new InvalidDataException("CreatorId is a required property for GetCorporationsCorporationIdOk and cannot be null");
            }
            else
            {
                this.CreatorId = CreatorId;
            }
            // to ensure "MemberCount" is required (not null)
            if (MemberCount == null)
            {
                throw new InvalidDataException("MemberCount is a required property for GetCorporationsCorporationIdOk and cannot be null");
            }
            else
            {
                this.MemberCount = MemberCount;
            }
            // to ensure "TaxRate" is required (not null)
            if (TaxRate == null)
            {
                throw new InvalidDataException("TaxRate is a required property for GetCorporationsCorporationIdOk and cannot be null");
            }
            else
            {
                this.TaxRate = TaxRate;
            }
            // to ensure "Ticker" is required (not null)
            if (Ticker == null)
            {
                throw new InvalidDataException("Ticker is a required property for GetCorporationsCorporationIdOk and cannot be null");
            }
            else
            {
                this.Ticker = Ticker;
            }
            // to ensure "Url" is required (not null)
            if (Url == null)
            {
                throw new InvalidDataException("Url is a required property for GetCorporationsCorporationIdOk and cannot be null");
            }
            else
            {
                this.Url = Url;
            }
            this.AllianceId = AllianceId;
            this.CreationDate = CreationDate;
            this.Faction = Faction;
        }
        
        /// <summary>
        /// id of alliance that corporation is a member of, if any
        /// </summary>
        /// <value>id of alliance that corporation is a member of, if any</value>
        [DataMember(Name="alliance_id", EmitDefaultValue=false)]
        public int? AllianceId { get; set; }

        /// <summary>
        /// ceo_id integer
        /// </summary>
        /// <value>ceo_id integer</value>
        [DataMember(Name="ceo_id", EmitDefaultValue=false)]
        public int? CeoId { get; set; }

        /// <summary>
        /// corporation_description string
        /// </summary>
        /// <value>corporation_description string</value>
        [DataMember(Name="corporation_description", EmitDefaultValue=false)]
        public string CorporationDescription { get; set; }

        /// <summary>
        /// the full name of the corporation
        /// </summary>
        /// <value>the full name of the corporation</value>
        [DataMember(Name="corporation_name", EmitDefaultValue=false)]
        public string CorporationName { get; set; }

        /// <summary>
        /// creation_date string
        /// </summary>
        /// <value>creation_date string</value>
        [DataMember(Name="creation_date", EmitDefaultValue=false)]
        public DateTime? CreationDate { get; set; }

        /// <summary>
        /// creator_id integer
        /// </summary>
        /// <value>creator_id integer</value>
        [DataMember(Name="creator_id", EmitDefaultValue=false)]
        public int? CreatorId { get; set; }


        /// <summary>
        /// member_count integer
        /// </summary>
        /// <value>member_count integer</value>
        [DataMember(Name="member_count", EmitDefaultValue=false)]
        public int? MemberCount { get; set; }

        /// <summary>
        /// tax_rate number
        /// </summary>
        /// <value>tax_rate number</value>
        [DataMember(Name="tax_rate", EmitDefaultValue=false)]
        public float? TaxRate { get; set; }

        /// <summary>
        /// the short name of the corporation
        /// </summary>
        /// <value>the short name of the corporation</value>
        [DataMember(Name="ticker", EmitDefaultValue=false)]
        public string Ticker { get; set; }

        /// <summary>
        /// url string
        /// </summary>
        /// <value>url string</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCorporationsCorporationIdOk {\n");
            sb.Append("  AllianceId: ").Append(AllianceId).Append("\n");
            sb.Append("  CeoId: ").Append(CeoId).Append("\n");
            sb.Append("  CorporationDescription: ").Append(CorporationDescription).Append("\n");
            sb.Append("  CorporationName: ").Append(CorporationName).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  CreatorId: ").Append(CreatorId).Append("\n");
            sb.Append("  Faction: ").Append(Faction).Append("\n");
            sb.Append("  MemberCount: ").Append(MemberCount).Append("\n");
            sb.Append("  TaxRate: ").Append(TaxRate).Append("\n");
            sb.Append("  Ticker: ").Append(Ticker).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCorporationsCorporationIdOk);
        }

        /// <summary>
        /// Returns true if GetCorporationsCorporationIdOk instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCorporationsCorporationIdOk to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCorporationsCorporationIdOk input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllianceId == input.AllianceId ||
                    (this.AllianceId != null &&
                    this.AllianceId.Equals(input.AllianceId))
                ) && 
                (
                    this.CeoId == input.CeoId ||
                    (this.CeoId != null &&
                    this.CeoId.Equals(input.CeoId))
                ) && 
                (
                    this.CorporationDescription == input.CorporationDescription ||
                    (this.CorporationDescription != null &&
                    this.CorporationDescription.Equals(input.CorporationDescription))
                ) && 
                (
                    this.CorporationName == input.CorporationName ||
                    (this.CorporationName != null &&
                    this.CorporationName.Equals(input.CorporationName))
                ) && 
                (
                    this.CreationDate == input.CreationDate ||
                    (this.CreationDate != null &&
                    this.CreationDate.Equals(input.CreationDate))
                ) && 
                (
                    this.CreatorId == input.CreatorId ||
                    (this.CreatorId != null &&
                    this.CreatorId.Equals(input.CreatorId))
                ) && 
                (
                    this.Faction == input.Faction ||
                    (this.Faction != null &&
                    this.Faction.Equals(input.Faction))
                ) && 
                (
                    this.MemberCount == input.MemberCount ||
                    (this.MemberCount != null &&
                    this.MemberCount.Equals(input.MemberCount))
                ) && 
                (
                    this.TaxRate == input.TaxRate ||
                    (this.TaxRate != null &&
                    this.TaxRate.Equals(input.TaxRate))
                ) && 
                (
                    this.Ticker == input.Ticker ||
                    (this.Ticker != null &&
                    this.Ticker.Equals(input.Ticker))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllianceId != null)
                    hashCode = hashCode * 59 + this.AllianceId.GetHashCode();
                if (this.CeoId != null)
                    hashCode = hashCode * 59 + this.CeoId.GetHashCode();
                if (this.CorporationDescription != null)
                    hashCode = hashCode * 59 + this.CorporationDescription.GetHashCode();
                if (this.CorporationName != null)
                    hashCode = hashCode * 59 + this.CorporationName.GetHashCode();
                if (this.CreationDate != null)
                    hashCode = hashCode * 59 + this.CreationDate.GetHashCode();
                if (this.CreatorId != null)
                    hashCode = hashCode * 59 + this.CreatorId.GetHashCode();
                if (this.Faction != null)
                    hashCode = hashCode * 59 + this.Faction.GetHashCode();
                if (this.MemberCount != null)
                    hashCode = hashCode * 59 + this.MemberCount.GetHashCode();
                if (this.TaxRate != null)
                    hashCode = hashCode * 59 + this.TaxRate.GetHashCode();
                if (this.Ticker != null)
                    hashCode = hashCode * 59 + this.Ticker.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TaxRate (float?) maximum
            if(this.TaxRate > (float?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TaxRate, must be a value less than or equal to 1.", new [] { "TaxRate" });
            }

            // TaxRate (float?) minimum
            if(this.TaxRate < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TaxRate, must be a value greater than or equal to 0.", new [] { "TaxRate" });
            }

            yield break;
        }
    }

}
